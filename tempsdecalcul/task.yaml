author: Maxime Jacques de Dixmude Slavic
contact_url: ''
context: |-
    On va comparer les temps de calcul de tes différentes fonctions ``est_premier(n)`` en répétant 100 000 de fois l’appel ``est_premier(n)``.

    Pour ce faire, on va avoir besoin que tu recherches tes anciens codes des 3 est_premierX(n).

    Si tu veux refaire ça chez toi, la ligne qui te permet de savoir combien de temps a pris l'execution de ta fonction se trouve dans le syllabus exo7 a la page 39.

    ``Attention`` : Pour le moment, les tests sont soumis à de l'aléatoire, il est donc possible qu'une bonne réponse se fasse rejecter et inversement.
environment_id: pyjavacpp
environment_parameters:
    limits:
        time: '30'
        hard_time: ''
        memory: '100'
    run_cmd: ''
environment_type: docker
file: ''
input_random: 0
name: Temps de calcul
network_grading: false
problems:
    q1:
        type: code
        name: ''
        header: L'exercice ici est de tester si tu as bien implementé les différentes
            optimisations proposées précédemment.
        language: python
        default: |
            def est_premier_1(n): #Remplace par ta fonction
                return False

            def est_premier_2(n): #Remplace par ta fonction
                return False

            def est_premier_3(n): #Remplace par ta fonction
                return False
