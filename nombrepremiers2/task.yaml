author: Maxime Jacques de Dixmude Slavic
contact_url: ''
context: |-
    Améliore ta fonction en une fonction ``est_premier_2(n)`` qui ne teste pas tous les diviseurs ``d`` jusqu’à ``n``, mais seulement jusqu’à ``racine carre de n``.

    **Explications** :

    • Par exemple, pour tester si 101 est un ``nombre premier``, il suffit de voir s’il admet des diviseurs parmi ``2, 3, . . . , 10``. Le gain est appréciable !
    • Cette amélioration est due à la proposition suivante : si un entier n’est pas ``premier`` alors il admet un diviseurs ``d`` qui vérifie ``2 <= d <= racine carre de n``.
    • Au lieu de tester si ``d <= racine carre de n``, il est plus facile de tester ``d² <= n`` !
environment_id: pyjavacpp
environment_parameters:
    limits:
        time: '30'
        hard_time: ''
        memory: '100'
    run_cmd: ''
environment_type: docker
file: ''
input_random: 0
name: Nombre premier 2
network_grading: false
problems:
    q1:
        type: code
        name: Optimisation de est_premier(n)
        header: ''
        language: python
        default: |-
            def est_premier_2(n):

                return False
